// Copyright 2023 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

{
    cluster: {
        cluster_base_addr: 0x10000000,
        cluster_base_offset: 0x0,
        cluster_base_hartid: 1,
        addr_width: 48,         // Length of the address, should be greater than 30. If the address is larger than 34 the data bus needs to be 64 bits in size [48]
        data_width: 64,
        atomic_id_width: 1,     // Width of the cluster's atomics ID [1]: max(1, clog2(total number of clusters))
        user_width: 49,         // User width of the narrower AXI plug into the cluster: addr_width + atomic_id_width
        tcdm: {
            size: 128,          // Size of TCDM in KiByte. Divided in `n` banks. The total size must be divisible by the number of banks [128]
            banks: 32,          // Number of banks [32]
        },
        cluster_periph_size: 60,// kB   Address region size reserved for cluster peripherals in KiByte
        zero_mem_size: 64,      // kB   Address region size reserved for the Zero-Memory in KiByte
        ext_mem_size: 4,        // kB   Address region size reserved for an external slave in KiByte
        dma_data_width: 512,
        dma_axi_req_fifo_depth: 24,
        dma_req_fifo_depth: 8,
        narrow_trans: 4,        // Outstanding transactions on the narrow AXI network
        wide_trans: 32,         // Outstanding transactions on the wide AXI network
        dma_user_width: 48,     // User width of the wide AXI plug into the cluster
        enable_multicast: true,
        cluster_base_expose: true,      // Whether to expose base_addr and base_hart_id
        alias_region_enable: true,      // Whether to provide a hardwired alias region for the TCDM (and cluster) address space - necessary for bootrom mechanism
        num_exposed_wide_tcdm_ports: 1, // Number of exposed wide ports into the TCDM at the cluster interface. Used to provide external masters, such as accelerators, with wide access to the TCDM
        narrow_axi_port_expose: true,   // Whether to expose a narrow AXI master port at the cluster interface. Used to provide a narrow interface to external slaves, e.g. to configure external accelerators
        enable_external_interrupts: true,
        // We don't need Snitch (core-internal) virtual memory support
        vm_support: false,
        // Memory configuration inputs
        sram_cfg_expose: true,
        sram_cfg_fields: {
            ema: 3,
            emaw: 2,
            emas: 1
        },
        // Timing parameters
        timing: {
            lat_comp_fp32: 2,
            lat_comp_fp64: 3,
            lat_comp_fp16: 1,
            lat_comp_fp16_alt: 1,
            lat_comp_fp8: 1,
            lat_comp_fp8_alt: 1,
            lat_noncomp: 1,
            lat_conv: 2,
            lat_sdotp: 3,
            fpu_pipe_config: "BEFORE",
            narrow_xbar_latency: "CUT_ALL_PORTS",
            wide_xbar_latency: "CUT_ALL_PORTS",
            // Isolate the core.
            register_core_req: true,
            register_core_rsp: true,
            register_offload_req: true,
            register_offload_rsp: true,
            register_fpu_req: true,
            register_ext_narrow: false,
            register_ext_wide: false
        },
        hives: [
            // Hive 0
            {
                icache: {
                    size: 8, // total instruction cache size in kByte [8]
                    ways: 2, // number of ways [2]
                    cacheline: 256 // word size in bits [128]               ToDo(cdurrer): use default (128) instead? Or possibly 512 (match wide port)?
                },
                cores: [
                    { $ref: "#/compute_core_template" },
                    { $ref: "#/dma_core_template" }
                ]
            }
        ]
    },
    external_addr_regions: [
        {
            name: "dram",
            address: 0x80000000,
            length: 0x80000000,
            cacheable: true
        },
        {
            name: "clint",
            address: 0xFFFF0000,
            length: 0x1000
        },
    ],
    // Templates.
    compute_core_template: {
        isa: "rv32imafd",
        xssr: true,
        xfrep: true,
        xcopift: true,
        xdma: false,
        xf16: true,
        xf16alt: true,
        xf8: true,
        xf8alt: true,
        xfdotp: true,
        xfvec: true,
        ssr_nr_credits: 4,
        num_int_outstanding_loads: 4,
        num_int_outstanding_mem: 4,
        num_fp_outstanding_loads: 4,
        num_fp_outstanding_mem: 4,
        num_sequencer_instructions: 32,
        num_sequencer_loops: 2,
        num_dtlb_entries: 1,
        num_itlb_entries: 1,
        // SSSR configuration below
        ssr_intersection: true,
        ssr_intersection_triple: [0, 1, 2],
        ssrs: [
            {indirection: true},    // Master 0
            {indirection: true},    // Master 1
            {},                     // Slave
        ],
    },
    dma_core_template: {
        isa: "rv32imafd",
        xdma: true,
        xssr: false,
        xfrep: false,
        xcopift: false,
        xf16: false,
        xf16alt: false,
        xf8: false,
        xf8alt: false,
        xfdotp: false,
        xfvec: false,
        num_int_outstanding_loads: 4,
        num_int_outstanding_mem: 4,
        num_fp_outstanding_loads: 4,
        num_fp_outstanding_mem: 4,
        num_dtlb_entries: 1,
        num_itlb_entries: 1,
    }
}
